<script src="<?php echo base_url(); ?>script/vis/dist/vis.js"></script>

<style type="text/css">
.group0Style {
  stroke-width:1px;   
  stroke: steelblue;
}
.group1Style {
  fill: #f2ea00;
  fill-opacity:0;
  stroke-width:1px;   
  stroke: orangered;
}
</style>

<script>		
/*
	// ajax!!! 가 필요해!

	// DOM element where the Timeline will be attached
	var container = document.getElementById('patientlist_timeline');

	// create a data set with groups // 그룹의 목록은 DB가 결정된 후 뽑도록. 예) 상품, 치료, 치료방법 등을 그룹으로 선정 후 통계를 돌리자!
	
	// visjs로는 kaplan meier의 중도절단 그래프를 그릴 수 없음. 따라서 d3js로 가는 것이 바람직함, 오로지 환자의 리스트를 표현하는데는 적절할 듯함.
	// 수직스크롤이 되지않아 많은 환자가 있을 경우가 걱정됨
	// 직선에 사람이름과 내원일을 점찍을 것인가?
	// 환자 하나 생성에 하나의 그룹을 만들어야 한다는 단점. 그룹이 많아지면 느려지지 않는가?
	// 더미 데이터가 꼭 필요한 상황

*/


	// 그릴 준비하기
    var container = document.getElementById('patientlist_timeline');

    // create a dataSet with groups 데이터세트 준비.
    // 그룹 하나가 직선하나를 그릴수 밖에 없으므로, 그룹을 다량생성
    var groups = new vis.DataSet();
    var dataset = new vis.DataSet();

	// 하나의 직선에 두개의 점이 찍히는데 그곳에 이름을 넣을 수 있음 이름넣기 예시 1
    var label1 = {
		content: "정o교",
		xOffset: 0,
		yOffset: 0,
		className: "blue"
  	}
  	
	// 환자 관련 날자 랜덤 모의 생성
  	var start = new Date(2000, 01, 01);
  	var end = new Date(2018, 01, 01);
  	
  	// 100개 환자 랜덤 생성
	for (var i = 0; i < 1000; i++) {
		if (Math.random() >= 0.5) {
			groups.add({
				id: i,
				options: {
					drawPoints: { size: 0, style: 'square'},
					interpolation: false, 
				},
				className: 'group0Style'
			});
		} else {
			groups.add({
				id: i,
				options: {
					drawPoints: { size: 0, style: 'square'},
					interpolation: false, 
				},
				className: 'group1Style'
			});		
		};
        dataset.add( [
            {x: new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())), y: i, group: i},  // 이름넣기 예시 2 , label: {content: i}
            {x: new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())), y: i, group: i},  // 이름넣기 예시 1 , label: label1
        ]);
    }
  	

// 그려지는 창의 모습
    var options = { 
		height: '1600px',
		autoResize: true,
		align: 'center',
		//clickToUse: true,

		min: "2000-01-01",
		max: new Date(new Date().getTime()+(365*24*60*60*1000)),
        drawPoints: true,
        dataAxis: {visible: true},  //y축을 보이게 할 것인지
        legend: false,  // 그래프 이름 설명 박스를 보여주기
        start: "2000-01-01",  // 보여줄 x축 폭
        end: "2018-01-01"
    };
    var graph2d = new vis.Graph2d(container, dataset, groups, options);


	

</script>